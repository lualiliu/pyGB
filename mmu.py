class MMU():
    _bios = [
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50]

    _rom = [];
    _carttype = 0;
    _mbc = [
            {},
            {'rombank':0,'rambank':0, 'ramon':0, 'mode':0}
            ];  #MMU._mbc[1]['rombank']
    _romoffs = 0x4000;
    _ramoffs = 0;
    _eram = [0]*32768;
    _wram = [0]*8192;
    _zram = [0]*127;

    _inbios = 1;
    _ie = 0;
    _if = 0;

    def reset():
        for i in range(8192): MMU._wram[i] = 0;
        for i in range(32768): MMU._eram[i] = 0;
        for i in range(127): MMU._zram[i] = 0;
        MMU._inbios = 1;
        MMU._mbc[0] = {};
        MMU._mbc[1] = {'rombank':0, 'rambank':0, 'ramon':0, 'mode':0};
        MMU._romoffs=0x4000;
        MMU._ramoffs=0;
        print("MMU Reset.");
    def load(file):
        b = open(file,"rb");
        MMU._rom = list(b.read());
        MMU._carttype = MMU._rom[0x0147];
        print("MMU,ROM loaded")
    def rb(addr):
        addrF = addr&0xF000;    #addrF确定访问内存的区块
        if(addrF == 0x0000):  #addr&0xF000 将addr分块
            if(MMU._inbios):
                if(addr<0x0100):
                    return MMU._bios[addr];
                elif(Z80._r.pc == 0x0100):
                    MMU._inbios = 0;
                    print("MMU Leaving BIOS");
            else:
                return MMU._rom[addr];
        elif(0x1000<=addrF<=0x3000):    #rom
            return MMU._rom[addr];
        elif(0x4000<=addrF<=0x7000):    #rom bank 1
            return MMU._rom[MMU._romoffs+(addr&0x3FFF)];
        elif(0x8000<=addrF<=0x9000):    #vram
            #return GPU._vram[addr&0x1FFF];
            return 0xFF;
        elif(0xA000<=addrF<=0xB000):    #External RAM
            return MMU._eram[MMU._ramoffs+(addr&0x1FFF)];
        elif(0xC000<=addrF<=0xE000):    #Work RAM and echo
            return MMU._wram[addr&0x1FFF];
        elif(addrF==0xF000):
            #Echo RAM
            if(0x000<=addr&0x0F00<=0xD00):
                return MMU.wram[addr&0x1FFF];
            elif(addr&0x0F00==0xE00):   #OAM
                if(addr < 0xFEA0):
                    #return GPU._oam[addr & 0xFF];
                    return 0xFF;
                else:
                    return 0;
            elif(addr&0x0F00==0xF00):   #Zero-page
                if(addr >= 0xFF80):
                    return MMU._zram[addr & 0x7F]
                else:
                    #I/O control handing
                    return 0;
    def rw(addr):
        return MMU.rb(addr)+(MMU.rb(addr+1)<<8);
    def wb(addr,val):
        addrF = addr&0xF000;    #addrF确定访问内存的区块
        if(0x0000<=addrF<=0x1000):
            if(MMU._carttype):
                if(((val&0xF)==0xA)):
                    MMU._mbc[1]['ramon']=1;
                else:
                    MMU._mbc[1]['ramon']=0;
        if(0x2000<=addrF<=0x3000):
            if(MMU._carttype):
                MMU._mbc[1]['rombank'] &=0x60;
                val &=0x1F;
                if(not val): val=1;
                MMU._mbc[1]['rombank'] |= val;
                MMU._romoffs = MMU._mbc[1].rombank * 0x4000;
        if(0x4000<=addrF<=0x5000):
            if(MMU._carttype):
                if(MMU._mbc[1]['mode']):
                    MMU._mbc[1]['rambank']=(val&3);
                    MMU._ramoffs = MMU._mbc[1].rambank * 0x2000;
                else:
                    MMU._mbc[1]['rombank'] &=0x1F;
                    MMU._mbc[1]['rombank'] |= ((val&3)<<5);
                    MMU._romoffs = MMU._mbc[1].rombank * 0x4000;
    def ww(addr,val):
        MMU.wb(addr,val&255);MMU.wb(addr+1,val>>8);
#MMU._mbc[1]['rombank'] = 1;
#MMU.load("opus5.gb")
print(MMU._carttype);
